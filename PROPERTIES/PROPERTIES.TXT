You can access at all the measures to have this module in the next link:
https://scikit-image.org/docs/0.16.x/api/skimage.measure.html
-------------------------------
Structure
measure(type of data)
-------------------------------
MEASURES

area(int)
Number of pixels of the region.

bbox(tuple)
Bounding box (min_row, min_col, max_row, max_col). Pixels belonging to the bounding box are in the half-open interval [min_row; max_row) and [min_col; max_col).

bbox_area(int)
Number of pixels of bounding box.

centroid(array)
Centroid coordinate tuple (row, col).

convex_area(int)
Number of pixels of convex hull image, which is the smallest convex polygon that encloses the region.

convex_image(H, J) ndarray
Binary convex hull image which has the same size as bounding box.

coords(N, 2) ndarray
Coordinate list (row, col) of the region.

eccentricityfloat
Eccentricity of the ellipse that has the same second-moments as the region. The eccentricity is the ratio of the focal distance (distance between focal points) over the major axis length. The value is in the interval [0, 1). When it is 0, the ellipse becomes a circle.

equivalent_diameter(float)
The diameter of a circle with the same area as the region.

euler_number(int)
Euler characteristic of region. Computed as number of objects (= 1) subtracted by number of holes (8-connectivity).

extent(float)
Ratio of pixels in the region to pixels in the total bounding box. Computed as area / (rows * cols)

filled_area(int)
Number of pixels of the region will all the holes filled in. Describes the area of the filled_image.

filled_image(H, J) ndarray
Binary region image with filled holes which has the same size as bounding box.

image(H, J) ndarray
Sliced binary region image which has the same size as bounding box.

inertia_tensor(ndarray)
Inertia tensor of the region for the rotation around its mass.

inertia_tensor_eigvals(tuple)
The eigenvalues of the inertia tensor in decreasing order.

intensity_image(ndarray)
Image inside region bounding box.

label(int)
The label in the labeled input image.

local_centroid(array)
Centroid coordinate tuple (row, col), relative to region bounding box.

major_axis_length(float)
The length of the major axis of the ellipse that has the same normalized second central moments as the region.

max_intensity(float)
Value with the greatest intensity in the region.

mean_intensity(float)
Value with the mean intensity in the region.

min_intensity(float)
Value with the least intensity in the region.

minor_axis_length(float)
The length of the minor axis of the ellipse that has the same normalized second central moments as the region.

moments(3, 3) ndarray
Spatial moments up to 3rd order:

m_ij = sum{ array(row, col) * row^i * col^j }
Copy to clipboard
where the sum is over the row, col coordinates of the region.

moments_central(3, 3) ndarray
Central moments (translation invariant) up to 3rd order:
mu_ij = sum{ array(row, col) * (row - row_c)^i * (col - col_c)^j }
where the sum is over the row, col coordinates of the region, and row_c and col_c are the coordinates of the region’s centroid.

moments_hu(tuple)
Hu moments (translation, scale and rotation invariant).

moments_normalized(3, 3) ndarray
Normalized moments (translation and scale invariant) up to 3rd order:
nu_ij = mu_ij / m_00^[(i+j)/2 + 1]
where m_00 is the zeroth spatial moment.

orientation(float)
Angle between the 0th axis (rows) and the major axis of the ellipse that has the same second moments as the region, ranging from -pi/2 to pi/2 counter-clockwise.

perimeter(float)
Perimeter of object which approximates the contour as a line through the centers of border pixels using a 4-connectivity.

slice(tuple of slices)
A slice to extract the object from the source image.

solidity(float)
Ratio of pixels in the region to pixels of the convex hull image.

weighted_centroid(array)
Centroid coordinate tuple (row, col) weighted with intensity image.

weighted_local_centroid(array)
Centroid coordinate tuple (row, col), relative to region bounding box, weighted with intensity image.

weighted_moments(3, 3) ndarray
Spatial moments of intensity image up to 3rd order:
wm_ij = sum{ array(row, col) * row^i * col^j }
where the sum is over the row, col coordinates of the region.

weighted_moments_central(3, 3) ndarray
Central moments (translation invariant) of intensity image up to 3rd order:
wmu_ij = sum{ array(row, col) * (row - row_c)^i * (col - col_c)^j }
where the sum is over the row, col coordinates of the region, and row_c and col_c are the coordinates of the region’s weighted centroid.

weighted_moments_hu(tuple)
Hu moments (translation, scale and rotation invariant) of intensity image.

weighted_moments_normalized(3, 3) ndarray
Normalized moments (translation and scale invariant) of intensity image up to 3rd order:
wnu_ij = wmu_ij / wm_00^[(i+j)/2 + 1]
where wm_00 is the zeroth spatial moment (intensity-weighted area).

Each region also supports iteration, so that you can do:
for prop in region:
    print(prop, region[prop])
